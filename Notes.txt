- Command to create a new folder
    nest new projectName

---------------------------------------------Files
-.prettierrc = Give format to the code consistently
-nest-cli = Allow us to override or add some configuration specific to the project
-tsconfig.build = Basically, this is for prod mode, due to here we can override some rules and
    it could reduce the bundle size
---------------------------------------------Nest Modules
Each app has at leat one module (root or main module). It is the starting point of the app
Modules are effective if they are organized by components, also, it is good to have a folder per module
They are singleton (this is a pattern), which means that a module could be imported by others

Module = It is a class with the decorator @Module, this decorator provides meta-data that is used by
    Nest to organized the app structure
    @Module = Provide
        -Providers: Array of providers to be available within the module via dependency injection
        -Controllers: Array of controllers instantiated
        -Exports: Array of providers to export modules
        -Imports: List of modules required by the current module

----------------------Creating a module or controller
-nest [g] [module/controller/service] [name] [--no-spec]
    -g = generate
    -option = Could be replace by another option, see more option typing nest g --help
        -module, it will generate a new folder (case it does not exist) an update app.module
        -controller, Ne controller file and update module file
        -service, New service file and update module file
    -name = name of the option, for this case, it is the module name
    -no-spec = it means that spec files won't be created

---------------------------------------------Nest Controllers
Responsible for handling inconming requests and returning responses to the client
Bound to a specific path
Containg handlers, which handle endpoints and reques methods (get, post, put delete)
Can take advantage of dependency injection to consume providers with same module

Controller = It has methods inside it, which each of it has decorator such as @GET, @POST...

---------------------------------------------Nest Providers and Services
-----Providers
Can be injected into contructors if decorated as an @Injectable, via dependency injection
Can be a plain value, class, sync/async factory...
It must be provided to a module for them to be usable
Can be exported from a module and then be available to others modules that imported it

-----Services
Defined as providers, but NO all providers are services
Singleton when wrapped with @Injection and provided to a module. That means, the same instance
will be shared across the application - acting as a single source of truth
The main source of business logic. 
Here you can add the business logic related to the tasks, something create, update, delete...

---------------------Dependency Injection in NestJs
Any component within the NestJs ecosystem can inject a provider that is decorated with the @Injectable
We define the dependency in the constructor for the class. NestJs will take care of the injection for
us, and it will then be available as a Class property.

---------------------------------------------Data Transfer Object (DTO)
It is used to encapsulate data, and sent it from one subsystem of an app to another
DTO is not a model definition. It defines the shape of data for a specific case, for example - creating a task
It can be defined using an interface or class
Define it in a class is better than an interface, due to class can be preserved post-compilation, also,
classes allow us to do more and NestJs can refer during run time, but not for interfaces

---------------------------------------------Nest Pipes
It operates in the arguments to be processed by the route handler, just before the handler is called
Can perform data transformation or validation
Can return data - either original or modified - which will be passed on the route handler
Can throw exeptions and also, it can be asynchronous

These are classes with @Injectable decorator

Image: Pipes-diagram

-------------------------------------------Docker
*Create a container
docker run --name postgress-nest -p 5432:5432 -e POSTGRESS_PASSWORD=postgress -d postgres
    *--name = container name
    *-p = port
    *-e = Will set a environment variable, this case is POSTGRESS_PASSWORD, and the value postgress
    *-d = Detached mode, it means if the terminal window is closed, it is going to keep running
    *postgres = Container name that is stored in the cloud

*Start/stop/remove a container
docker container start/stop/rm containerName/Id

*List container started
docker ls

